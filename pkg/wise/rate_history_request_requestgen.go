// Code generated by "requestgen -method GET -url /rates/history -type RateHistoryRequest -responseType []Rate"; DO NOT EDIT.

package wise

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (r *RateHistoryRequest) Source(source string) *RateHistoryRequest {
	r.source = source
	return r
}

func (r *RateHistoryRequest) Target(target string) *RateHistoryRequest {
	r.target = target
	return r
}

func (r *RateHistoryRequest) Length(length int) *RateHistoryRequest {
	r.length = length
	return r
}

func (r *RateHistoryRequest) Resolution(resolution Resolution) *RateHistoryRequest {
	r.resolution = resolution
	return r
}

func (r *RateHistoryRequest) Unit(unit Unit) *RateHistoryRequest {
	r.unit = unit
	return r
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (r *RateHistoryRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (r *RateHistoryRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check source field -> json key source
	source := r.source

	// assign parameter of source
	params["source"] = source
	// check target field -> json key target
	target := r.target

	// assign parameter of target
	params["target"] = target
	// check length field -> json key length
	length := r.length

	// assign parameter of length
	params["length"] = length
	// check resolution field -> json key resolution
	resolution := r.resolution

	// assign parameter of resolution
	params["resolution"] = resolution
	// check unit field -> json key unit
	unit := r.unit

	// assign parameter of unit
	params["unit"] = unit

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (r *RateHistoryRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := r.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if r.isVarSlice(_v) {
			r.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (r *RateHistoryRequest) GetParametersJSON() ([]byte, error) {
	params, err := r.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (r *RateHistoryRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (r *RateHistoryRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (r *RateHistoryRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (r *RateHistoryRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (r *RateHistoryRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := r.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (r *RateHistoryRequest) GetPath() string {
	return "/rates/history"
}

// Do generates the request object and send the request object to the API endpoint
func (r *RateHistoryRequest) Do(ctx context.Context) ([]Rate, error) {

	// empty params for GET operation
	var params interface{}
	query, err := r.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	var apiURL string

	apiURL = r.GetPath()

	req, err := r.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := r.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Rate
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return apiResponse, nil
}
