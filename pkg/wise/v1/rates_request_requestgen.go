// Code generated by "requestgen -method GET -url /v1/rates -type RatesRequest -responseType []Rate"; DO NOT EDIT.

package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (r *RatesRequest) Source(source string) *RatesRequest {
	r.source = source
	return r
}

func (r *RatesRequest) Target(target string) *RatesRequest {
	r.target = target
	return r
}

func (r *RatesRequest) Time(time string) *RatesRequest {
	r.time = &time
	return r
}

func (r *RatesRequest) From(from string) *RatesRequest {
	r.from = &from
	return r
}

func (r *RatesRequest) To(to string) *RatesRequest {
	r.to = &to
	return r
}

func (r *RatesRequest) Group(group Group) *RatesRequest {
	r.group = &group
	return r
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (r *RatesRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check source field -> json key source
	source := r.source

	// assign parameter of source
	params["source"] = source
	// check target field -> json key target
	target := r.target

	// assign parameter of target
	params["target"] = target
	// check time field -> json key time
	if r.time != nil {
		time := *r.time

		// assign parameter of time
		params["time"] = time
	} else {
	}
	// check from field -> json key from
	if r.from != nil {
		from := *r.from

		// assign parameter of from
		params["from"] = from
	} else {
	}
	// check to field -> json key to
	if r.to != nil {
		to := *r.to

		// assign parameter of to
		params["to"] = to
	} else {
	}
	// check group field -> json key group
	if r.group != nil {
		group := *r.group

		// TEMPLATE check-valid-values
		switch group {
		case GroupMinute, GroupHour, GroupDay:
			params["group"] = group

		default:
			return nil, fmt.Errorf("group value %v is invalid", group)

		}
		// END TEMPLATE check-valid-values

		// assign parameter of group
		params["group"] = group
	} else {
	}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (r *RatesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (r *RatesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := r.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if r.isVarSlice(_v) {
			r.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (r *RatesRequest) GetParametersJSON() ([]byte, error) {
	params, err := r.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (r *RatesRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (r *RatesRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (r *RatesRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (r *RatesRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (r *RatesRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := r.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (r *RatesRequest) Do(ctx context.Context) ([]Rate, error) {

	// no body params
	var params interface{}
	query, err := r.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	apiURL := "/v1/rates"

	req, err := r.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := r.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Rate
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
