// Code generated by "requestgen -method GET -url /gateway/v1/price -type PriceRequest -responseType []Price"; DO NOT EDIT.

package wise

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (p *PriceRequest) SourceAmount(sourceAmount float64) *PriceRequest {
	p.sourceAmount = &sourceAmount
	return p
}

func (p *PriceRequest) SourceCurrency(sourceCurrency string) *PriceRequest {
	p.sourceCurrency = sourceCurrency
	return p
}

func (p *PriceRequest) TargetAmount(targetAmount float64) *PriceRequest {
	p.targetAmount = &targetAmount
	return p
}

func (p *PriceRequest) TargetCurrency(targetCurrency string) *PriceRequest {
	p.targetCurrency = targetCurrency
	return p
}

func (p *PriceRequest) ProfileID(profileID int) *PriceRequest {
	p.profileID = &profileID
	return p
}

func (p *PriceRequest) ProfileCountry(profileCountry string) *PriceRequest {
	p.profileCountry = &profileCountry
	return p
}

func (p *PriceRequest) ProfileType(profileType string) *PriceRequest {
	p.profileType = &profileType
	return p
}

func (p *PriceRequest) Markers(markers string) *PriceRequest {
	p.markers = &markers
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PriceRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check sourceAmount field -> json key sourceAmount
	if p.sourceAmount != nil {
		sourceAmount := *p.sourceAmount

		// assign parameter of sourceAmount
		params["sourceAmount"] = sourceAmount
	} else {
	}
	// check sourceCurrency field -> json key sourceCurrency
	sourceCurrency := p.sourceCurrency

	// assign parameter of sourceCurrency
	params["sourceCurrency"] = sourceCurrency
	// check targetAmount field -> json key targetAmount
	if p.targetAmount != nil {
		targetAmount := *p.targetAmount

		// assign parameter of targetAmount
		params["targetAmount"] = targetAmount
	} else {
	}
	// check targetCurrency field -> json key targetCurrency
	targetCurrency := p.targetCurrency

	// assign parameter of targetCurrency
	params["targetCurrency"] = targetCurrency
	// check profileID field -> json key profileId
	if p.profileID != nil {
		profileID := *p.profileID

		// assign parameter of profileID
		params["profileId"] = profileID
	} else {
	}
	// check profileCountry field -> json key profileCountry
	if p.profileCountry != nil {
		profileCountry := *p.profileCountry

		// assign parameter of profileCountry
		params["profileCountry"] = profileCountry
	} else {
	}
	// check profileType field -> json key profileType
	if p.profileType != nil {
		profileType := *p.profileType

		// assign parameter of profileType
		params["profileType"] = profileType
	} else {
	}
	// check markers field -> json key markers
	if p.markers != nil {
		markers := *p.markers

		// assign parameter of markers
		params["markers"] = markers
	} else {
	}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PriceRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PriceRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if p.isVarSlice(_v) {
			p.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PriceRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PriceRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PriceRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (p *PriceRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (p *PriceRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PriceRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (p *PriceRequest) Do(ctx context.Context) ([]Price, error) {

	// no body params
	var params interface{}
	query, err := p.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	apiURL := "/gateway/v1/price"

	req, err := p.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Price
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
