// Code generated by "requestgen -method POST -url /gateway/v3/quotes -type QuoteRequest -responseType Quote"; DO NOT EDIT.

package wise

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (q *QuoteRequest) SourceCurrency(sourceCurrency string) *QuoteRequest {
	q.sourceCurrency = sourceCurrency
	return q
}

func (q *QuoteRequest) TargetCurrency(targetCurrency string) *QuoteRequest {
	q.targetCurrency = targetCurrency
	return q
}

func (q *QuoteRequest) SourceAmount(sourceAmount float64) *QuoteRequest {
	q.sourceAmount = &sourceAmount
	return q
}

func (q *QuoteRequest) TargetAmount(targetAmount float64) *QuoteRequest {
	q.targetAmount = &targetAmount
	return q
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (q *QuoteRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (q *QuoteRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check sourceCurrency field -> json key sourceCurrency
	sourceCurrency := q.sourceCurrency

	// assign parameter of sourceCurrency
	params["sourceCurrency"] = sourceCurrency
	// check targetCurrency field -> json key targetCurrency
	targetCurrency := q.targetCurrency

	// assign parameter of targetCurrency
	params["targetCurrency"] = targetCurrency
	// check sourceAmount field -> json key sourceAmount
	if q.sourceAmount != nil {
		sourceAmount := *q.sourceAmount

		// assign parameter of sourceAmount
		params["sourceAmount"] = sourceAmount
	} else {
	}
	// check targetAmount field -> json key targetAmount
	if q.targetAmount != nil {
		targetAmount := *q.targetAmount

		// assign parameter of targetAmount
		params["targetAmount"] = targetAmount
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (q *QuoteRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := q.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if q.isVarSlice(_v) {
			q.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (q *QuoteRequest) GetParametersJSON() ([]byte, error) {
	params, err := q.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (q *QuoteRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (q *QuoteRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (q *QuoteRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (q *QuoteRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (q *QuoteRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := q.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

// GetPath returns the request path of the API
func (q *QuoteRequest) GetPath() string {
	return "/gateway/v3/quotes"
}

// Do generates the request object and send the request object to the API endpoint
func (q *QuoteRequest) Do(ctx context.Context) (*Quote, error) {

	params, err := q.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	var apiURL string

	apiURL = q.GetPath()

	req, err := q.client.NewAuthenticatedRequest(ctx, "POST", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := q.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse Quote
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}

	type responseValidator interface {
		Validate() error
	}
	validator, ok := interface{}(apiResponse).(responseValidator)
	if ok {
		if err := validator.Validate(); err != nil {
			return nil, err
		}
	}
	return &apiResponse, nil
}
